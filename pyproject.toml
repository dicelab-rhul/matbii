[project]
name = "matbii"
version = "0.0.8"
description = "A configurable implementation of the MATB-II: Multi-Attribute Task Battery."
authors = [{name = "Benedict Wilkins", email = "benrjw@gmail.com"}]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "icua[tobii]>=2.0.9"
]

[project.optional-dependencies]
dev = [
  "matplotlib",
  "pandas",
  "numpy",
  "pytest>=6.2.4", 
  "mkdocs",
  "mkdocstrings", 
  "mkdocs-autorefs", 
  "mkdocs-gen-files",    # for generating API reference 
  "mkdocs-literate-nav", # for generating API reference (optional)
  "mkdocs-section-index",
  "mkdocs-macros-plugin", # various macros for markdown (jinja2 based) 
  "mike", # versioned documentation
]

[project.urls]
Repository = "https://github.com/dicelab-rhul/matbii"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["matbii*"]

[tool.setuptools.package-data]
"matbii.tasks" = ["**/*.sch", "**/*.schema.json", "**/*.svg.jinja"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra -q"]
testpaths = ["test/"]
python_files = "*/test_*.py"
python_classes = "Test*"
python_functions = "test_*"
filterwarnings = [
  "ignore::DeprecationWarning:pydantic",
  "ignore::DeprecationWarning:pygame",
  "ignore::DeprecationWarning:cerberus",
]






[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    "example/", # TODO remove this, these should be tested/documented aswell!
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.19
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []
extend-select = [
  "UP",  # pyupgrade
  "D",   # pydocstyle
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "google"